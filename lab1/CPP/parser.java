
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Nov 09 16:46:05 CET 2017
//----------------------------------------------------

package CPP;


/** CUP v0.10k generated parser.
  * @version Thu Nov 09 16:46:05 CET 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\003\003\000\002\004" +
    "\002\000\002\004\004\000\002\005\012\000\002\005\005" +
    "\000\002\006\002\000\002\006\003\000\002\006\005\000" +
    "\002\007\002\000\002\007\004\000\002\010\004\000\002" +
    "\011\004\000\002\011\005\000\002\011\007\000\002\011" +
    "\007\000\002\011\006\000\002\011\005\000\002\011\007" +
    "\000\002\011\005\000\002\011\011\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\005\000\002\013\006\000\002\013\006\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\016\003\000\002\017\003\000\002\020\003\000\002" +
    "\021\003\000\002\022\003\000\002\023\003\000\002\024" +
    "\003\000\002\025\003\000\002\026\003\000\002\027\003" +
    "\000\002\030\003\000\002\031\003\000\002\032\002\000" +
    "\002\032\003\000\002\032\005\000\002\033\002\000\002" +
    "\033\004\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\003" +
    "\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\020\002\uffff\022\uffff\023\uffff\026\uffff\031" +
    "\uffff\032\uffff\037\uffff\001\002\000\004\002\153\001\002" +
    "\000\020\002\000\022\015\023\014\026\013\031\012\032" +
    "\011\037\010\001\002\000\004\037\023\001\002\000\020" +
    "\002\ufffe\022\ufffe\023\ufffe\026\ufffe\031\ufffe\032\ufffe\037" +
    "\ufffe\001\002\000\032\004\uffc8\005\uffc8\010\uffc8\011\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\021\037\uffc8\001\002\000\004\037\uffca\001\002\000\004" +
    "\037\010\001\002\000\004\037\uffcb\001\002\000\004\037" +
    "\uffcc\001\002\000\004\037\uffcd\001\002\000\004\037\uffc9" +
    "\001\002\000\004\011\020\001\002\000\020\002\ufffc\022" +
    "\ufffc\023\ufffc\026\ufffc\031\ufffc\032\ufffc\037\ufffc\001\002" +
    "\000\004\037\010\001\002\000\030\004\uffc7\005\uffc7\010" +
    "\uffc7\011\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\037\uffc7\001\002\000\004\004\024\001\002\000" +
    "\016\005\ufffb\022\015\023\014\026\013\032\011\037\010" +
    "\001\002\000\004\037\152\001\002\000\004\005\032\001" +
    "\002\000\006\005\ufffa\010\030\001\002\000\016\005\ufffb" +
    "\022\015\023\014\026\013\032\011\037\010\001\002\000" +
    "\004\005\ufff9\001\002\000\004\006\033\001\002\000\054" +
    "\004\ufff8\006\ufff8\007\ufff8\011\ufff8\013\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\001\002\000\054\004\057\006\053\007\050" +
    "\011\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022" +
    "\015\023\014\025\044\026\013\027\043\030\066\032\011" +
    "\033\064\034\040\035\036\036\045\037\010\001\002\000" +
    "\022\005\uffd4\010\uffd4\011\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\001\002\000\026\004\uffec\005\uffec\010" +
    "\uffec\011\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\001\002\000\022\005\uffd5\010\uffd5\011\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\001\002\000\030" +
    "\004\uffcf\005\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\034\040\001\002\000\022" +
    "\005\uffdf\010\uffdf\011\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\001\002\000\054\004\ufff7\006\ufff7\007\ufff7" +
    "\011\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022" +
    "\ufff7\023\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\001\002\000" +
    "\030\004\057\011\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\034\040\035\036\036\045\037\010\001\002\000" +
    "\004\004\141\001\002\000\026\004\uffea\005\uffea\010\uffea" +
    "\011\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\001\002\000\004\037\131\001\002\000\026\004\uffeb" +
    "\005\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\001\002\000\020\002\ufffd\022\ufffd" +
    "\023\ufffd\026\ufffd\031\ufffd\032\ufffd\037\ufffd\001\002\000" +
    "\022\005\uffd6\010\uffd6\011\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\126\020\125\001\002\000\022\005\uffd7\010\uffd7\011" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\001\002" +
    "\000\054\004\ufff8\006\ufff8\007\ufff8\011\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\001\002\000\022\005\uffd8\010\uffd8" +
    "\011\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\001" +
    "\002\000\022\005\uffd9\010\uffd9\011\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\001\002\000\004\011\122\001" +
    "\002\000\030\004\057\005\uffcf\013\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\034\040\035\036\036\045\037\010\001" +
    "\002\000\022\005\uffda\010\uffda\011\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\001\002\000\022\005\uffdb\010" +
    "\uffdb\011\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\001\002\000\022\005\uffdc\010\uffdc\011\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\001\002\000\022\005\uffdd" +
    "\010\uffdd\011\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\001\002\000\004\004\114\001\002\000\022\005\uffde" +
    "\010\uffde\011\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\001\002\000\004\037\010\001\002\000\022\004\uffe9" +
    "\011\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\037" +
    "\uffc9\001\002\000\026\004\uffe5\005\uffe5\010\uffe5\011\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\001" +
    "\002\000\026\004\100\005\uffe2\010\uffe2\011\uffe2\013\101" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\001\002\000" +
    "\022\005\uffd3\010\uffd3\011\uffd3\014\uffd3\015\074\016\073" +
    "\017\uffd3\020\uffd3\001\002\000\004\037\077\001\002\000" +
    "\036\004\057\005\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\034\040\035\036\036" +
    "\045\037\010\001\002\000\022\005\uffe4\010\uffe4\011\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\001\002\000" +
    "\026\004\uffe9\005\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\001\002\000\022\005" +
    "\uffe3\010\uffe3\011\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\001\002\000\032\004\057\005\uffd2\010\uffcf\013" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\034\040\035\036" +
    "\036\045\037\010\001\002\000\030\004\057\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\034\040\035\036" +
    "\036\045\037\010\001\002\000\004\014\103\001\002\000" +
    "\026\004\uffe7\005\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\001\002\000\004\005" +
    "\110\001\002\000\006\005\uffd1\010\106\001\002\000\032" +
    "\004\057\005\uffd2\010\uffcf\013\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\034\040\035\036\036\045\037\010\001\002" +
    "\000\004\005\uffd0\001\002\000\026\004\uffe6\005\uffe6\010" +
    "\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\001\002\000\004\037\112\001\002\000\004\011" +
    "\113\001\002\000\056\004\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\001\002\000" +
    "\030\004\057\005\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\034\040\035\036\036\045\037\010\001\002\000" +
    "\004\005\116\001\002\000\052\004\057\006\053\011\uffcf" +
    "\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\015\023" +
    "\014\025\044\026\013\027\043\030\066\032\011\033\064" +
    "\034\040\035\036\036\045\037\010\001\002\000\056\004" +
    "\uffef\006\uffef\007\uffef\011\uffef\013\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\001\002\000\004\005\121\001\002\000" +
    "\026\004\uffe8\005\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\001\002\000\056\004" +
    "\ufff5\006\ufff5\007\ufff5\011\ufff5\013\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\001\002\000\054\004\057\006\053\007" +
    "\124\011\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\022\015\023\014\025\044\026\013\027\043\030\066\032" +
    "\011\033\064\034\040\035\036\036\045\037\010\001\002" +
    "\000\056\004\uffee\006\uffee\007\uffee\011\uffee\013\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\001\002\000\036\004\057" +
    "\005\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\034\040\035\036\036\045\037\010" +
    "\001\002\000\036\004\057\005\uffcf\010\uffcf\011\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\034\040" +
    "\035\036\036\045\037\010\001\002\000\022\005\uffe1\010" +
    "\uffe1\011\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\001\002\000\022\005\uffe0\010\uffe0\011\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\001\002\000\010\010\132" +
    "\011\134\012\133\001\002\000\004\037\010\001\002\000" +
    "\030\004\057\011\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\034\040\035\036\036\045\037\010\001\002\000" +
    "\056\004\ufff4\006\ufff4\007\ufff4\011\ufff4\013\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\001\002\000\004\011\136\001" +
    "\002\000\056\004\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\001\002\000\004\011" +
    "\140\001\002\000\056\004\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002\000" +
    "\030\004\057\005\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\034\040\035\036\036\045\037\010\001\002\000" +
    "\004\005\143\001\002\000\052\004\057\006\053\011\uffcf" +
    "\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\015\023" +
    "\014\025\044\026\013\027\043\030\066\032\011\033\064" +
    "\034\040\035\036\036\045\037\010\001\002\000\004\024" +
    "\145\001\002\000\052\004\057\006\053\011\uffcf\013\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\015\023\014\025" +
    "\044\026\013\027\043\030\066\032\011\033\064\034\040" +
    "\035\036\036\045\037\010\001\002\000\056\004\uffed\006" +
    "\uffed\007\uffed\011\uffed\013\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\001\002\000\004\011\150\001\002\000\056\004" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\013\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\001\002\000\026\004\uffce\005\uffce\010" +
    "\uffce\011\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\001\002\000\006\005\ufff6\010\ufff6\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\010\005\006\034\005\035\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\025\010\026\034" +
    "\024\035\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\030\010\026\034\024\035" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\033\001\001\000\052\011\041\012\067\013\070\014" +
    "\071\015\050\016\055\017\064\020\062\021\061\022\060" +
    "\023\057\024\054\025\053\026\051\027\040\030\036\031" +
    "\034\033\046\034\045\035\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\012\067" +
    "\013\070\014\071\015\050\016\146\017\064\020\062\021" +
    "\061\022\060\023\057\024\054\025\053\026\051\027\040" +
    "\030\036\031\034\033\046\035\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\012\067\013\070\014\071\015" +
    "\050\016\117\017\064\020\062\021\061\022\060\023\057" +
    "\024\054\025\053\026\051\027\040\030\036\031\034\033" +
    "\046\035\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\012\067\013\070\014\071\015\050" +
    "\016\074\017\064\020\062\021\061\022\060\023\057\024" +
    "\054\025\053\026\051\027\040\030\036\031\034\033\046" +
    "\035\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\012\067\013\070\014\071\015\050" +
    "\016\104\017\064\020\062\021\061\022\060\023\057\024" +
    "\054\025\053\026\051\027\040\030\036\031\034\032\103" +
    "\033\046\035\075\001\001\000\046\012\067\013\070\014" +
    "\071\015\050\016\101\017\064\020\062\021\061\022\060" +
    "\023\057\024\054\025\053\026\051\027\040\030\036\031" +
    "\034\033\046\035\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\012" +
    "\067\013\070\014\071\015\050\016\104\017\064\020\062" +
    "\021\061\022\060\023\057\024\054\025\053\026\051\027" +
    "\040\030\036\031\034\032\106\033\046\035\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\012\067\013\070" +
    "\014\071\015\050\016\114\017\064\020\062\021\061\022" +
    "\060\023\057\024\054\025\053\026\051\027\040\030\036" +
    "\031\034\033\046\035\075\001\001\000\002\001\001\000" +
    "\052\011\116\012\067\013\070\014\071\015\050\016\055" +
    "\017\064\020\062\021\061\022\060\023\057\024\054\025" +
    "\053\026\051\027\040\030\036\031\034\033\046\034\045" +
    "\035\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\011\041\012\067" +
    "\013\070\014\071\015\050\016\055\017\064\020\062\021" +
    "\061\022\060\023\057\024\054\025\053\026\051\027\040" +
    "\030\036\031\034\033\046\034\045\035\066\001\001\000" +
    "\002\001\001\000\022\012\067\013\070\014\071\027\127" +
    "\030\036\031\034\033\046\035\075\001\001\000\022\012" +
    "\067\013\070\014\071\027\126\030\036\031\034\033\046" +
    "\035\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\136\001\001\000\046\012\067" +
    "\013\070\014\071\015\050\016\134\017\064\020\062\021" +
    "\061\022\060\023\057\024\054\025\053\026\051\027\040" +
    "\030\036\031\034\033\046\035\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\012\067\013\070\014\071\015" +
    "\050\016\141\017\064\020\062\021\061\022\060\023\057" +
    "\024\054\025\053\026\051\027\040\030\036\031\034\033" +
    "\046\035\075\001\001\000\002\001\001\000\052\011\143" +
    "\012\067\013\070\014\071\015\050\016\055\017\064\020" +
    "\062\021\061\022\060\023\057\024\054\025\053\026\051" +
    "\027\040\030\036\031\034\033\046\034\045\035\066\001" +
    "\001\000\002\001\001\000\052\011\145\012\067\013\070" +
    "\014\071\015\050\016\055\017\064\020\062\021\061\022" +
    "\060\023\057\024\054\025\053\026\051\027\040\030\036" +
    "\031\034\033\046\034\045\035\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public CPP.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (CPP.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListId ::= Id _SYMB_13 ListId 
            {
              CPP.Absyn.ListId RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.ListId p_3 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ListId*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListId ::= Id 
            {
              CPP.Absyn.ListId RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ListId(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ListId*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type ::= ListId 
            {
              CPP.Absyn.Type RESULT = null;
		CPP.Absyn.ListId p_1 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.Tid(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Type ::= _SYMB_22 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tvoid(); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Type ::= _SYMB_18 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tint(); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Type ::= _SYMB_15 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tdouble(); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Type ::= _SYMB_14 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tbool(); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListString ::= _STRING_ ListString 
            {
              CPP.Absyn.ListString RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		CPP.Absyn.ListString p_2 = (CPP.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ListString*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListString ::= 
            {
              CPP.Absyn.ListString RESULT = null;
		 RESULT = new CPP.Absyn.ListString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ListString*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListExp ::= Exp _SYMB_4 ListExp 
            {
              CPP.Absyn.ListExp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.ListExp p_3 = (CPP.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListExp ::= Exp 
            {
              CPP.Absyn.ListExp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListExp ::= 
            {
              CPP.Absyn.ListExp RESULT = null;
		 RESULT = new CPP.Absyn.ListExp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp12 ::= Exp13 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp11 ::= Exp12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Exp11*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp10 ::= Exp11 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Exp10*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp8 ::= Exp9 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Exp8*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp7 ::= Exp8 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp6 ::= Exp7 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Exp6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp5 ::= Exp6 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Exp5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp4 ::= Exp5 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Exp4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp3 ::= Exp4 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp2 ::= Exp3 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp1 ::= Exp2 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= Exp1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp9 ::= Exp10 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp9 ::= Exp9 _SYMB_12 Exp10 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ERShift(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp9 ::= Exp9 _SYMB_11 Exp10 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ELShift(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp13 ::= Exp14 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp13 ::= Exp13 _SYMB_10 Id 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EArrow(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp13 ::= Exp13 _SYMB_9 Exp 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EDot(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp14 ::= Exp15 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp14 ::= Exp14 _SYMB_0 ListExp _SYMB_1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		CPP.Absyn.ListExp p_3 = (CPP.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.ECall(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp14 ::= Exp14 _SYMB_7 Exp _SYMB_8 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.EIndex(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp15 ::= _SYMB_0 Exp _SYMB_1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp15 ::= ListId 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.ListId p_1 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EQcon(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp15 ::= _DOUBLE_ 
            {
              CPP.Absyn.Exp RESULT = null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EDouble(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp15 ::= ListString 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.ListString p_1 = (CPP.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EString(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp15 ::= _INTEGER_ 
            {
              CPP.Absyn.Exp RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stm ::= _SYMB_17 _SYMB_0 Exp _SYMB_1 Stm _SYMB_16 Stm 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		CPP.Absyn.Stm p_5 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Stm p_7 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stm ::= _SYMB_2 ListStm _SYMB_3 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.ListStm p_2 = (CPP.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SBlock(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stm ::= _SYMB_23 _SYMB_0 Exp _SYMB_1 Stm 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Stm p_5 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stm ::= _SYMB_19 Exp _SYMB_5 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SReturn(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stm ::= _SYMB_20 ListId Id _SYMB_5 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.ListId p_2 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.STypedef(p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stm ::= Type Id _SYMB_6 Exp _SYMB_5 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		CPP.Absyn.Exp p_4 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SInit(p_1,p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stm ::= Type Id _SYMB_4 ListId _SYMB_5 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		CPP.Absyn.ListId p_4 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SDecls(p_1,p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stm ::= Type Id _SYMB_5 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SDecl(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stm ::= Exp _SYMB_5 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SExp(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Arg ::= Type Id 
            {
              CPP.Absyn.Arg RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ADecl(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Arg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListStm ::= ListStm Stm 
            {
              CPP.Absyn.ListStm RESULT = null;
		CPP.Absyn.ListStm p_1 = (CPP.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		CPP.Absyn.Stm p_2 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListStm ::= 
            {
              CPP.Absyn.ListStm RESULT = null;
		 RESULT = new CPP.Absyn.ListStm(); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListArg ::= Arg _SYMB_4 ListArg 
            {
              CPP.Absyn.ListArg RESULT = null;
		CPP.Absyn.Arg p_1 = (CPP.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.ListArg p_3 = (CPP.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListArg ::= Arg 
            {
              CPP.Absyn.ListArg RESULT = null;
		CPP.Absyn.Arg p_1 = (CPP.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListArg ::= 
            {
              CPP.Absyn.ListArg RESULT = null;
		 RESULT = new CPP.Absyn.ListArg(); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Def ::= _SYMB_21 ListId _SYMB_5 
            {
              CPP.Absyn.Def RESULT = null;
		CPP.Absyn.ListId p_2 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.QConuse(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Def ::= Type Id _SYMB_0 ListArg _SYMB_1 _SYMB_2 ListStm _SYMB_3 
            {
              CPP.Absyn.Def RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		CPP.Absyn.ListArg p_4 = (CPP.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		CPP.Absyn.ListStm p_7 = (CPP.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.DFun(p_1,p_2,p_4,p_7); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListDef ::= ListDef Def 
            {
              CPP.Absyn.ListDef RESULT = null;
		CPP.Absyn.ListDef p_1 = (CPP.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		CPP.Absyn.Def p_2 = (CPP.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListDef ::= 
            {
              CPP.Absyn.ListDef RESULT = null;
		 RESULT = new CPP.Absyn.ListDef(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDef 
            {
              CPP.Absyn.Program RESULT = null;
		CPP.Absyn.ListDef p_1 = (CPP.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.Prog(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		CPP.Absyn.Program start_val = (CPP.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

