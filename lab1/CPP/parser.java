
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Nov 13 15:15:25 CET 2017
//----------------------------------------------------

package CPP;


/** CUP v0.10k generated parser.
  * @version Mon Nov 13 15:15:25 CET 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\003\003\000\002\004" +
    "\002\000\002\004\004\000\002\005\012\000\002\005\010" +
    "\000\002\005\006\000\002\005\006\000\002\005\004\000" +
    "\002\005\007\000\002\005\005\000\002\006\002\000\002" +
    "\006\003\000\002\006\005\000\002\007\002\000\002\007" +
    "\004\000\002\010\003\000\002\010\004\000\002\010\006" +
    "\000\002\011\004\000\002\011\004\000\002\011\007\000" +
    "\002\011\006\000\002\011\006\000\002\011\005\000\002" +
    "\011\007\000\002\011\005\000\002\011\007\000\002\011" +
    "\011\000\002\011\013\000\002\011\011\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\013\006\000\002" +
    "\013\006\000\002\013\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\004\000\002\014\004\000\002\014\003" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\003\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\007\000\002\025\003\000\002" +
    "\026\004\000\002\026\003\000\002\027\003\000\002\030" +
    "\003\000\002\031\003\000\002\032\002\000\002\032\003" +
    "\000\002\032\005\000\002\033\003\000\002\033\004\000" +
    "\002\034\003\000\002\034\004\000\002\034\004\000\002" +
    "\034\005\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\036\003" +
    "\000\002\036\004\000\002\037\003\000\002\037\005\000" +
    "\002\040\003\000\002\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\024\002\uffff\047\uffff\050\uffff\052\uffff\056" +
    "\uffff\061\uffff\062\uffff\063\uffff\071\uffff\001\002\000\004" +
    "\002\307\001\002\000\024\002\000\047\023\050\022\052" +
    "\021\056\017\061\014\062\013\063\012\071\011\001\002" +
    "\000\004\071\047\001\002\000\014\005\uffaa\010\uffaa\011" +
    "\uffaa\045\046\071\uffaa\001\002\000\024\002\ufffe\047\ufffe" +
    "\050\ufffe\052\ufffe\056\ufffe\061\ufffe\062\ufffe\063\ufffe\071" +
    "\ufffe\001\002\000\076\004\uff9d\010\uffa1\011\uffa1\012\uff9d" +
    "\013\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\045\uff9d\046\027\071\uff9d" +
    "\001\002\000\014\005\uffa3\010\uffa3\011\uffa3\045\uffa3\071" +
    "\uffa3\001\002\000\004\071\024\001\002\000\016\047\023" +
    "\050\022\052\021\056\017\063\012\071\024\001\002\000" +
    "\006\010\uff9f\011\032\001\002\000\004\010\031\001\002" +
    "\000\014\005\uffa4\010\uffa4\011\uffa4\045\uffa4\071\uffa4\001" +
    "\002\000\014\005\uffa2\010\uffa2\011\uffa2\045\uffa2\071\uffa2" +
    "\001\002\000\014\005\uffa5\010\uffa5\011\uffa5\045\uffa5\071" +
    "\uffa5\001\002\000\014\047\023\052\021\056\017\063\012" +
    "\071\024\001\002\000\014\005\uffa6\010\uffa6\011\uffa6\045" +
    "\uffa6\071\uffa6\001\002\000\104\004\uff9d\005\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\027\071\uff9d\001\002\000\014\005" +
    "\uffa8\010\uffa8\011\uffa8\045\026\071\uffa8\001\002\000\012" +
    "\005\uffa7\010\uffa7\011\uffa7\071\uffa7\001\002\000\004\071" +
    "\024\001\002\000\102\004\uff9c\005\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\071\uff9c\001\002\000\024\002\ufff9\047\ufff9\050" +
    "\ufff9\052\ufff9\056\ufff9\061\ufff9\062\ufff9\063\ufff9\071\ufff9" +
    "\001\002\000\016\047\023\050\022\052\021\056\017\063" +
    "\012\071\011\001\002\000\004\071\035\001\002\000\004" +
    "\010\uff9e\001\002\000\006\010\uffa0\011\uffa0\001\002\000" +
    "\004\071\042\001\002\000\006\045\uffa2\071\040\001\002" +
    "\000\004\010\041\001\002\000\024\002\ufffb\047\ufffb\050" +
    "\ufffb\052\ufffb\056\ufffb\061\ufffb\062\ufffb\063\ufffb\071\ufffb" +
    "\001\002\000\004\010\043\001\002\000\024\002\ufffa\047" +
    "\ufffa\050\ufffa\052\ufffa\056\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\071\ufffa\001\002\000\004\010\045\001\002\000\024\002" +
    "\ufff7\047\ufff7\050\ufff7\052\ufff7\056\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\071\ufff7\001\002\000\012\005\uffa9\010\uffa9\011" +
    "\uffa9\071\uffa9\001\002\000\012\004\050\010\uffa0\011\uffa0" +
    "\012\051\001\002\000\020\005\ufff6\047\023\050\022\052" +
    "\021\056\017\063\012\071\024\001\002\000\030\004\073" +
    "\017\064\020\063\021\061\022\057\060\062\065\055\066" +
    "\066\067\052\070\060\071\024\001\002\000\076\004\uffe2" +
    "\005\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\001\002\000\062\005\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\014\uffcc\021\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\001\002\000\062\005\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\014\uffc9\021\166\023\165\024\164" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\001\002\000\100\004\uffac\005" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\023\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\065\055\001\002\000\054\005\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\014\uffc6\025\162\026\161\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\001\002\000\026\004\073\017\064\020\063\021\061" +
    "\022\057\065\055\066\066\067\052\070\060\071\024\001" +
    "\002\000\076\004\uffe0\005\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\001\002" +
    "\000\026\004\073\017\064\020\063\021\061\022\057\065" +
    "\055\066\066\067\052\070\060\071\024\001\002\000\030" +
    "\004\073\017\064\020\063\021\061\022\057\060\062\065" +
    "\055\066\066\067\052\070\060\071\024\001\002\000\026" +
    "\004\073\017\064\020\063\021\061\022\057\065\055\066" +
    "\066\067\052\070\060\071\024\001\002\000\026\004\073" +
    "\017\064\020\063\021\061\022\057\065\055\066\066\067" +
    "\052\070\060\071\024\001\002\000\076\004\uffe1\005\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\001\002\000\076\004\uffde\005\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\001\002\000\050\005\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\014\uffc1\027\157\030\156\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\001\002\000\044\005\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\014\uffbe\031\152\032\151\033\154" +
    "\034\153\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\001\002\000\034\005\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\014\uffb0\035\147\036\146\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\001\002\000\004" +
    "\010\145\001\002\000\030\004\073\017\064\020\063\021" +
    "\061\022\057\060\062\065\055\066\066\067\052\070\060" +
    "\071\024\001\002\000\030\005\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\014\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\001\002\000\030\005\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\014\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\001\002\000\030\005\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\014\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\001\002\000\030\005\uffba\010\uffba\011\uffba\012" +
    "\uffba\014\uffba\037\134\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\001\002\000\026\005\uffb5\010\uffb5\011\uffb5\012" +
    "\131\014\uffb5\040\130\041\127\042\126\043\125\044\uffb5" +
    "\001\002\000\014\005\uffb3\010\uffb3\011\uffb3\014\uffb3\044" +
    "\uffb3\001\002\000\076\004\uffda\005\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\001\002\000\076\004\uffdf\005\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\001" +
    "\002\000\076\004\113\005\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\114\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\001\002" +
    "\000\072\005\uffd0\010\uffd0\011\uffd0\012\uffd0\014\uffd0\015" +
    "\107\016\106\017\111\020\110\021\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\001\002\000\004\071\124\001" +
    "\002\000\016\004\073\065\055\066\066\067\052\070\060" +
    "\071\024\001\002\000\072\005\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\001\002\000" +
    "\072\005\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\001\002\000\076\004\113\005\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\114\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\001\002\000\032\004\073\005\uffaf\017" +
    "\064\020\063\021\061\022\057\060\062\065\055\066\066" +
    "\067\052\070\060\071\024\001\002\000\030\004\073\017" +
    "\064\020\063\021\061\022\057\060\062\065\055\066\066" +
    "\067\052\070\060\071\024\001\002\000\004\014\116\001" +
    "\002\000\076\004\uffdc\005\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\001\002" +
    "\000\004\005\123\001\002\000\006\005\uffae\011\121\001" +
    "\002\000\032\004\073\005\uffaf\017\064\020\063\021\061" +
    "\022\057\060\062\065\055\066\066\067\052\070\060\071" +
    "\024\001\002\000\004\005\uffad\001\002\000\076\004\uffdb" +
    "\005\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\001\002\000\072\005\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\001\002\000\030\004\073\017\064\020\063\021\061" +
    "\022\057\060\062\065\055\066\066\067\052\070\060\071" +
    "\024\001\002\000\026\004\073\017\064\020\063\021\061" +
    "\022\057\065\055\066\066\067\052\070\060\071\024\001" +
    "\002\000\026\004\073\017\064\020\063\021\061\022\057" +
    "\065\055\066\066\067\052\070\060\071\024\001\002\000" +
    "\026\004\073\017\064\020\063\021\061\022\057\065\055" +
    "\066\066\067\052\070\060\071\024\001\002\000\026\004" +
    "\073\017\064\020\063\021\061\022\057\065\055\066\066" +
    "\067\052\070\060\071\024\001\002\000\014\005\uffb9\010" +
    "\uffb9\011\uffb9\014\uffb9\044\uffb9\001\002\000\030\005\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\014\uffbb\037\134\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\001\002\000\026\004\073" +
    "\017\064\020\063\021\061\022\057\065\055\066\066\067" +
    "\052\070\060\071\024\001\002\000\030\005\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\014\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\001\002\000\014\005\uffb8\010\uffb8" +
    "\011\uffb8\014\uffb8\044\uffb8\001\002\000\014\005\uffb7\010" +
    "\uffb7\011\uffb7\014\uffb7\044\uffb7\001\002\000\004\044\141" +
    "\001\002\000\026\004\073\017\064\020\063\021\061\022" +
    "\057\065\055\066\066\067\052\070\060\071\024\001\002" +
    "\000\014\005\uffb6\010\uffb6\011\uffb6\014\uffb6\044\uffb6\001" +
    "\002\000\004\005\144\001\002\000\076\004\uffdd\005\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\001\002\000\024\002\ufff8\047\ufff8\050" +
    "\ufff8\052\ufff8\056\ufff8\061\ufff8\062\ufff8\063\ufff8\071\ufff8" +
    "\001\002\000\026\004\073\017\064\020\063\021\061\022" +
    "\057\065\055\066\066\067\052\070\060\071\024\001\002" +
    "\000\026\004\073\017\064\020\063\021\061\022\057\065" +
    "\055\066\066\067\052\070\060\071\024\001\002\000\044" +
    "\005\uffc0\010\uffc0\011\uffc0\012\uffc0\014\uffc0\031\152\032" +
    "\151\033\154\034\153\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\001\002\000\026\004" +
    "\073\017\064\020\063\021\061\022\057\065\055\066\066" +
    "\067\052\070\060\071\024\001\002\000\026\004\073\017" +
    "\064\020\063\021\061\022\057\065\055\066\066\067\052" +
    "\070\060\071\024\001\002\000\026\004\073\017\064\020" +
    "\063\021\061\022\057\065\055\066\066\067\052\070\060" +
    "\071\024\001\002\000\026\004\073\017\064\020\063\021" +
    "\061\022\057\065\055\066\066\067\052\070\060\071\024" +
    "\001\002\000\050\005\uffc3\010\uffc3\011\uffc3\012\uffc3\014" +
    "\uffc3\027\157\030\156\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\001\002\000\026\004\073\017\064\020\063" +
    "\021\061\022\057\065\055\066\066\067\052\070\060\071" +
    "\024\001\002\000\026\004\073\017\064\020\063\021\061" +
    "\022\057\065\055\066\066\067\052\070\060\071\024\001" +
    "\002\000\054\005\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8" +
    "\025\162\026\161\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\001\002\000\026\004\073\017" +
    "\064\020\063\021\061\022\057\065\055\066\066\067\052" +
    "\070\060\071\024\001\002\000\026\004\073\017\064\020" +
    "\063\021\061\022\057\065\055\066\066\067\052\070\060" +
    "\071\024\001\002\000\062\005\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\014\uffcb\021\166\023\165\024\164\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\001\002\000\026\004\073\017\064\020\063\021" +
    "\061\022\057\065\055\066\066\067\052\070\060\071\024" +
    "\001\002\000\026\004\073\017\064\020\063\021\061\022" +
    "\057\065\055\066\066\067\052\070\060\071\024\001\002" +
    "\000\026\004\073\017\064\020\063\021\061\022\057\065" +
    "\055\066\066\067\052\070\060\071\024\001\002\000\062" +
    "\005\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf\021\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002\000\062" +
    "\005\uffce\010\uffce\011\uffce\012\uffce\014\uffce\021\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\001\002\000\062" +
    "\005\uffcd\010\uffcd\011\uffcd\012\uffcd\014\uffcd\021\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\001\002\000\062" +
    "\005\uffca\010\uffca\011\uffca\012\uffca\014\uffca\021\166\023" +
    "\165\024\164\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\001\002\000\054" +
    "\005\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\025\162\026" +
    "\161\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\001\002\000\050\005\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\014\uffc2\027\157\030\156\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\001\002\000\050\005\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\014\uffc5\027\157\030\156\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\001\002\000\050" +
    "\005\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4\027\157\030" +
    "\156\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\001" +
    "\002\000\044\005\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf" +
    "\031\152\032\151\033\154\034\153\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\001\002" +
    "\000\062\005\uffd4\010\uffd4\011\uffd4\012\uffd4\014\uffd4\021" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\001\002" +
    "\000\062\005\uffd3\010\uffd3\011\uffd3\012\uffd3\014\uffd3\021" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\001\002" +
    "\000\014\005\uffb4\010\uffb4\011\uffb4\014\uffb4\044\uffb4\001" +
    "\002\000\062\005\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2" +
    "\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\001" +
    "\002\000\062\005\uffd1\010\uffd1\011\uffd1\012\uffd1\014\uffd1" +
    "\021\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\001" +
    "\002\000\076\004\uffab\005\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\001\002" +
    "\000\012\005\ufff1\010\ufff1\011\ufff1\071\304\001\002\000" +
    "\004\005\213\001\002\000\006\005\ufff5\011\211\001\002" +
    "\000\020\005\ufff6\047\023\050\022\052\021\056\017\063" +
    "\012\071\024\001\002\000\004\005\ufff4\001\002\000\006" +
    "\006\215\010\214\001\002\000\024\002\ufffc\047\ufffc\050" +
    "\ufffc\052\ufffc\056\ufffc\061\ufffc\062\ufffc\063\ufffc\071\ufffc" +
    "\001\002\000\062\004\ufff3\006\ufff3\007\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3" +
    "\001\002\000\062\004\073\006\225\007\224\017\064\020" +
    "\063\021\061\022\057\047\023\050\022\051\227\052\021" +
    "\054\223\055\222\056\017\057\221\060\062\061\220\063" +
    "\012\064\217\065\055\066\066\067\052\070\060\071\011" +
    "\001\002\000\004\004\300\001\002\000\016\047\023\050" +
    "\022\052\021\056\017\063\012\071\024\001\002\000\030" +
    "\004\073\017\064\020\063\021\061\022\057\060\062\065" +
    "\055\066\066\067\052\070\060\071\024\001\002\000\004" +
    "\004\262\001\002\000\004\004\252\001\002\000\024\002" +
    "\ufffd\047\ufffd\050\ufffd\052\ufffd\056\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\071\ufffd\001\002\000\062\004\ufff3\006\ufff3\007" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060" +
    "\ufff3\061\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\070\ufff3\071\ufff3\001\002\000\004\010\247\001\002\000" +
    "\060\004\073\006\225\017\064\020\063\021\061\022\057" +
    "\047\023\050\022\051\227\052\021\054\223\055\222\056" +
    "\017\057\221\060\062\061\220\063\012\064\217\065\055" +
    "\066\066\067\052\070\060\071\011\001\002\000\062\004" +
    "\ufff2\006\ufff2\007\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\070\ufff2\071\ufff2\001\002\000\072\004" +
    "\uffdf\010\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\045" +
    "\uffa2\071\uffa2\001\002\000\004\010\240\001\002\000\004" +
    "\071\234\001\002\000\010\010\uffa0\011\uffa0\012\235\001" +
    "\002\000\030\004\073\017\064\020\063\021\061\022\057" +
    "\060\062\065\055\066\066\067\052\070\060\071\024\001" +
    "\002\000\004\010\237\001\002\000\064\004\uffec\006\uffec" +
    "\007\uffec\017\uffec\020\uffec\021\uffec\022\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\071\uffec\001\002\000\064\004\uffee" +
    "\006\uffee\007\uffee\017\uffee\020\uffee\021\uffee\022\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\067\uffee\070\uffee\071\uffee\001\002\000\004" +
    "\064\242\001\002\000\004\004\243\001\002\000\030\004" +
    "\073\017\064\020\063\021\061\022\057\060\062\065\055" +
    "\066\066\067\052\070\060\071\024\001\002\000\004\005" +
    "\245\001\002\000\004\010\246\001\002\000\064\004\uffe3" +
    "\006\uffe3\007\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\063\uffe3\064\uffe3\065" +
    "\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\001\002\000\064" +
    "\004\uffed\006\uffed\007\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\001\002" +
    "\000\062\004\073\006\225\007\251\017\064\020\063\021" +
    "\061\022\057\047\023\050\022\051\227\052\021\054\223" +
    "\055\222\056\017\057\221\060\062\061\220\063\012\064" +
    "\217\065\055\066\066\067\052\070\060\071\011\001\002" +
    "\000\064\004\uffe7\006\uffe7\007\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\063" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7" +
    "\001\002\000\016\047\023\050\022\052\021\056\017\063" +
    "\012\071\024\001\002\000\004\010\254\001\002\000\030" +
    "\004\073\017\064\020\063\021\061\022\057\060\062\065" +
    "\055\066\066\067\052\070\060\071\024\001\002\000\004" +
    "\010\256\001\002\000\030\004\073\017\064\020\063\021" +
    "\061\022\057\060\062\065\055\066\066\067\052\070\060" +
    "\071\024\001\002\000\004\005\260\001\002\000\060\004" +
    "\073\006\225\017\064\020\063\021\061\022\057\047\023" +
    "\050\022\051\227\052\021\054\223\055\222\056\017\057" +
    "\221\060\062\061\220\063\012\064\217\065\055\066\066" +
    "\067\052\070\060\071\011\001\002\000\064\004\uffe4\006" +
    "\uffe4\007\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\070\uffe4\071\uffe4\001\002\000\030\004" +
    "\073\017\064\020\063\021\061\022\057\060\062\065\055" +
    "\066\066\067\052\070\060\071\024\001\002\000\004\005" +
    "\264\001\002\000\060\004\073\006\225\017\064\020\063" +
    "\021\061\022\057\047\023\050\022\051\227\052\021\054" +
    "\223\055\222\056\017\057\221\060\062\061\220\063\012" +
    "\064\217\065\055\066\066\067\052\070\060\071\011\001" +
    "\002\000\064\004\uffe6\006\uffe6\007\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\266\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071" +
    "\uffe6\001\002\000\060\004\073\006\225\017\064\020\063" +
    "\021\061\022\057\047\023\050\022\051\227\052\021\054" +
    "\223\055\222\056\017\057\221\060\062\061\220\063\012" +
    "\064\217\065\055\066\066\067\052\070\060\071\011\001" +
    "\002\000\064\004\uffe5\006\uffe5\007\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071" +
    "\uffe5\001\002\000\004\010\271\001\002\000\064\004\uffe9" +
    "\006\uffe9\007\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\061\uffe9\063\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\001\002\000\004" +
    "\071\276\001\002\000\006\045\uffa2\071\274\001\002\000" +
    "\004\010\275\001\002\000\064\004\uffeb\006\uffeb\007\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\001\002\000\004\010\277\001\002" +
    "\000\064\004\uffea\006\uffea\007\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\063" +
    "\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea" +
    "\001\002\000\030\004\073\017\064\020\063\021\061\022" +
    "\057\060\062\065\055\066\066\067\052\070\060\071\024" +
    "\001\002\000\004\005\302\001\002\000\060\004\073\006" +
    "\225\017\064\020\063\021\061\022\057\047\023\050\022" +
    "\051\227\052\021\054\223\055\222\056\017\057\221\060" +
    "\062\061\220\063\012\064\217\065\055\066\066\067\052" +
    "\070\060\071\011\001\002\000\064\004\uffe8\006\uffe8\007" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\070\uffe8\071\uffe8\001\002\000\012\005\ufff0\010" +
    "\ufff0\011\ufff0\012\305\001\002\000\030\004\073\017\064" +
    "\020\063\021\061\022\057\060\062\065\055\066\066\067" +
    "\052\070\060\071\024\001\002\000\010\005\uffef\010\uffef" +
    "\011\uffef\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\016\005\007\034\005\035\006\036\014\037\015" +
    "\040\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\043\001\001\000\010\034\035\035\006\040\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\024\040" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\034\032\035\006" +
    "\036\014\037\033\040\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\206\010" +
    "\207\034\205\035\006\040\017\001\001\000\046\012\101" +
    "\013\103\014\104\015\052\016\053\017\055\020\066\021" +
    "\067\022\070\023\076\024\077\025\100\026\071\027\075" +
    "\030\074\031\073\033\064\040\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\204" +
    "\001\001\000\002\001\001\000\016\012\101\013\103\014" +
    "\104\015\203\033\064\040\102\001\001\000\002\001\001" +
    "\000\016\012\101\013\103\014\104\015\202\033\064\040" +
    "\102\001\001\000\046\012\101\013\103\014\104\015\052" +
    "\016\053\017\055\020\066\021\067\022\070\023\076\024" +
    "\077\025\100\026\201\027\075\030\074\031\073\033\064" +
    "\040\102\001\001\000\016\012\101\013\103\014\104\015" +
    "\200\033\064\040\102\001\001\000\016\012\101\013\103" +
    "\014\104\015\177\033\064\040\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\012\101\013" +
    "\103\014\104\015\052\016\053\017\055\020\066\021\067" +
    "\022\070\023\076\024\077\025\100\026\142\027\075\030" +
    "\074\031\073\033\064\040\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\101\013\111\033\064\040\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\012\101\013\103\014\104\015\052\016\053\017\055" +
    "\020\066\021\067\022\070\023\076\024\077\025\100\026" +
    "\117\027\075\030\074\031\073\032\116\033\064\040\102" +
    "\001\001\000\046\012\101\013\103\014\104\015\052\016" +
    "\053\017\055\020\066\021\067\022\070\023\076\024\077" +
    "\025\100\026\114\027\075\030\074\031\073\033\064\040" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\012\101\013\103\014" +
    "\104\015\052\016\053\017\055\020\066\021\067\022\070" +
    "\023\076\024\077\025\100\026\117\027\075\030\074\031" +
    "\073\032\121\033\064\040\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\012\101\013" +
    "\103\014\104\015\052\016\053\017\055\020\066\021\067" +
    "\022\070\023\076\024\077\025\100\026\137\027\075\030" +
    "\074\031\073\033\064\040\102\001\001\000\044\012\101" +
    "\013\103\014\104\015\052\016\053\017\055\020\066\021" +
    "\067\022\070\023\076\024\077\025\136\027\075\030\074" +
    "\031\073\033\064\040\102\001\001\000\044\012\101\013" +
    "\103\014\104\015\052\016\053\017\055\020\066\021\067" +
    "\022\070\023\076\024\077\025\135\027\075\030\074\031" +
    "\073\033\064\040\102\001\001\000\040\012\101\013\103" +
    "\014\104\015\052\016\053\017\055\020\066\021\067\022" +
    "\070\023\132\027\075\030\074\031\073\033\064\040\102" +
    "\001\001\000\044\012\101\013\103\014\104\015\052\016" +
    "\053\017\055\020\066\021\067\022\070\023\076\024\077" +
    "\025\131\027\075\030\074\031\073\033\064\040\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\101" +
    "\013\103\014\104\015\052\016\053\017\055\020\066\021" +
    "\067\022\070\027\134\030\074\031\073\033\064\040\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\012\101\013\103\014\104" +
    "\015\052\016\053\017\055\020\066\021\067\022\070\023" +
    "\076\024\077\025\141\027\075\030\074\031\073\033\064" +
    "\040\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\101\013\103" +
    "\014\104\015\052\016\053\017\055\020\066\021\176\033" +
    "\064\040\102\001\001\000\026\012\101\013\103\014\104" +
    "\015\052\016\053\017\055\020\066\021\147\033\064\040" +
    "\102\001\001\000\002\001\001\000\024\012\101\013\103" +
    "\014\104\015\052\016\053\017\055\020\175\033\064\040" +
    "\102\001\001\000\024\012\101\013\103\014\104\015\052" +
    "\016\053\017\055\020\174\033\064\040\102\001\001\000" +
    "\024\012\101\013\103\014\104\015\052\016\053\017\055" +
    "\020\173\033\064\040\102\001\001\000\024\012\101\013" +
    "\103\014\104\015\052\016\053\017\055\020\154\033\064" +
    "\040\102\001\001\000\002\001\001\000\022\012\101\013" +
    "\103\014\104\015\052\016\053\017\172\033\064\040\102" +
    "\001\001\000\022\012\101\013\103\014\104\015\052\016" +
    "\053\017\157\033\064\040\102\001\001\000\002\001\001" +
    "\000\020\012\101\013\103\014\104\015\052\016\171\033" +
    "\064\040\102\001\001\000\020\012\101\013\103\014\104" +
    "\015\052\016\162\033\064\040\102\001\001\000\002\001" +
    "\001\000\016\012\101\013\103\014\104\015\170\033\064" +
    "\040\102\001\001\000\016\012\101\013\103\014\104\015" +
    "\167\033\064\040\102\001\001\000\016\012\101\013\103" +
    "\014\104\015\166\033\064\040\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\211\010\207\034\205\035" +
    "\006\040\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\215\001\001\000\060\011" +
    "\227\012\101\013\103\014\104\015\052\016\053\017\055" +
    "\020\066\021\067\022\070\023\076\024\077\025\100\026" +
    "\231\027\075\030\074\031\073\033\064\034\232\035\006" +
    "\036\014\037\225\040\230\001\001\000\002\001\001\000" +
    "\010\034\271\035\006\040\272\001\001\000\046\012\101" +
    "\013\103\014\104\015\052\016\053\017\055\020\066\021" +
    "\067\022\070\023\076\024\077\025\100\026\267\027\075" +
    "\030\074\031\073\033\064\040\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\247" +
    "\001\001\000\002\001\001\000\060\011\240\012\101\013" +
    "\103\014\104\015\052\016\053\017\055\020\066\021\067" +
    "\022\070\023\076\024\077\025\100\026\231\027\075\030" +
    "\074\031\073\033\064\034\232\035\006\036\014\037\225" +
    "\040\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\012\101\013\103\014\104\015\052\016\053\017\055\020" +
    "\066\021\067\022\070\023\076\024\077\025\100\026\235" +
    "\027\075\030\074\031\073\033\064\040\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\012\101\013\103\014" +
    "\104\015\052\016\053\017\055\020\066\021\067\022\070" +
    "\023\076\024\077\025\100\026\243\027\075\030\074\031" +
    "\073\033\064\040\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\011" +
    "\227\012\101\013\103\014\104\015\052\016\053\017\055" +
    "\020\066\021\067\022\070\023\076\024\077\025\100\026" +
    "\231\027\075\030\074\031\073\033\064\034\232\035\006" +
    "\036\014\037\225\040\230\001\001\000\002\001\001\000" +
    "\012\010\252\034\205\035\006\040\017\001\001\000\002" +
    "\001\001\000\046\012\101\013\103\014\104\015\052\016" +
    "\053\017\055\020\066\021\067\022\070\023\076\024\077" +
    "\025\100\026\254\027\075\030\074\031\073\033\064\040" +
    "\102\001\001\000\002\001\001\000\046\012\101\013\103" +
    "\014\104\015\052\016\053\017\055\020\066\021\067\022" +
    "\070\023\076\024\077\025\100\026\256\027\075\030\074" +
    "\031\073\033\064\040\102\001\001\000\002\001\001\000" +
    "\060\011\260\012\101\013\103\014\104\015\052\016\053" +
    "\017\055\020\066\021\067\022\070\023\076\024\077\025" +
    "\100\026\231\027\075\030\074\031\073\033\064\034\232" +
    "\035\006\036\014\037\225\040\230\001\001\000\002\001" +
    "\001\000\046\012\101\013\103\014\104\015\052\016\053" +
    "\017\055\020\066\021\067\022\070\023\076\024\077\025" +
    "\100\026\262\027\075\030\074\031\073\033\064\040\102" +
    "\001\001\000\002\001\001\000\060\011\264\012\101\013" +
    "\103\014\104\015\052\016\053\017\055\020\066\021\067" +
    "\022\070\023\076\024\077\025\100\026\231\027\075\030" +
    "\074\031\073\033\064\034\232\035\006\036\014\037\225" +
    "\040\230\001\001\000\002\001\001\000\060\011\266\012" +
    "\101\013\103\014\104\015\052\016\053\017\055\020\066" +
    "\021\067\022\070\023\076\024\077\025\100\026\231\027" +
    "\075\030\074\031\073\033\064\034\232\035\006\036\014" +
    "\037\225\040\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\012\101\013\103\014\104\015\052" +
    "\016\053\017\055\020\066\021\067\022\070\023\076\024" +
    "\077\025\100\026\300\027\075\030\074\031\073\033\064" +
    "\040\102\001\001\000\002\001\001\000\060\011\302\012" +
    "\101\013\103\014\104\015\052\016\053\017\055\020\066" +
    "\021\067\022\070\023\076\024\077\025\100\026\231\027" +
    "\075\030\074\031\073\033\064\034\232\035\006\036\014" +
    "\037\225\040\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\012\101\013\103\014\104\015\052\016\053" +
    "\017\055\020\066\021\067\022\070\023\076\024\077\025" +
    "\100\026\305\027\075\030\074\031\073\033\064\040\102" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public CPP.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (CPP.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ListId ::= Id _SYMB_34 ListId 
            {
              CPP.Absyn.ListId RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.ListId p_3 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ListId*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ListId ::= Id 
            {
              CPP.Absyn.ListId RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ListId(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ListId*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ListTypen ::= Typen _SYMB_5 ListTypen 
            {
              CPP.Absyn.ListTypen RESULT = null;
		CPP.Absyn.Typen p_1 = (CPP.Absyn.Typen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.ListTypen p_3 = (CPP.Absyn.ListTypen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListTypen*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ListTypen ::= Typen 
            {
              CPP.Absyn.ListTypen RESULT = null;
		CPP.Absyn.Typen p_1 = (CPP.Absyn.Typen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ListTypen(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListTypen*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Typen ::= Type Id 
            {
              CPP.Absyn.Typen RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.Tnames(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Typen*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Typen ::= Id 
            {
              CPP.Absyn.Typen RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.Tname(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Typen*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Type1 ::= ListId 
            {
              CPP.Absyn.Type RESULT = null;
		CPP.Absyn.ListId p_1 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.Tid(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Type1 ::= _SYMB_47 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tvoid(); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Type1 ::= _SYMB_42 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tint(); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Type1 ::= _SYMB_38 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tdouble(); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Type1 ::= _SYMB_35 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tbool(); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Type ::= _SYMB_36 Type1 _SYMB_33 
            {
              CPP.Absyn.Type RESULT = null;
		CPP.Absyn.Type p_2 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.Ttype4(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Type ::= _SYMB_36 Type1 
            {
              CPP.Absyn.Type RESULT = null;
		CPP.Absyn.Type p_2 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.Ttype3(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Type ::= Type1 _SYMB_33 
            {
              CPP.Absyn.Type RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.Ttype2(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Type ::= Type1 
            {
              CPP.Absyn.Type RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.Ttype1(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ListString ::= _STRING_ ListString 
            {
              CPP.Absyn.ListString RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		CPP.Absyn.ListString p_2 = (CPP.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ListString*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ListString ::= _STRING_ 
            {
              CPP.Absyn.ListString RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ListString(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ListString*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ListExp ::= Exp _SYMB_5 ListExp 
            {
              CPP.Absyn.ListExp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.ListExp p_3 = (CPP.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListExp ::= Exp 
            {
              CPP.Absyn.ListExp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListExp ::= 
            {
              CPP.Absyn.ListExp RESULT = null;
		 RESULT = new CPP.Absyn.ListExp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp6 ::= Exp7 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Exp6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp5 ::= Exp6 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Exp5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp4 ::= Exp5 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Exp4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp ::= Exp1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Exp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp ::= _SYMB_44 Exp 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EThrow(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Exp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp1 ::= Exp2 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp1 ::= Exp2 _SYMB_31 Exp _SYMB_32 Exp1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_5 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ECond(p_1,p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp1 ::= Exp2 _SYMB_30 Exp1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EAssm(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp1 ::= Exp2 _SYMB_29 Exp1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EAssp(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp1 ::= Exp2 _SYMB_6 Exp1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EAss(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp2 ::= Exp3 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Exp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp2 ::= Exp2 _SYMB_28 Exp3 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EDisj(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Exp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp3 ::= Exp4 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Exp3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp3 ::= Exp3 _SYMB_27 Exp4 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EConj(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Exp3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp7 ::= Exp8 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Exp7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp7 ::= Exp7 _SYMB_26 Exp8 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ENeq(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Exp7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp7 ::= Exp7 _SYMB_25 Exp8 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Exp7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp8 ::= Exp9 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp8*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp8 ::= Exp8 _SYMB_24 Exp9 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EGteq(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp8*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp8 ::= Exp8 _SYMB_23 Exp9 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ELteq(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp8*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp8 ::= Exp8 _SYMB_22 Exp9 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EGt(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp8*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp8 ::= Exp8 _SYMB_21 Exp9 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ELt(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp8*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp9 ::= Exp10 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp9 ::= Exp9 _SYMB_20 Exp10 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ERShift(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp9 ::= Exp9 _SYMB_19 Exp10 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ELShift(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp10 ::= Exp11 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp10*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp10 ::= Exp10 _SYMB_18 Exp11 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp10*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp10 ::= Exp10 _SYMB_17 Exp11 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp10*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp11 ::= Exp12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp11*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp11 ::= Exp11 _SYMB_16 Exp12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EMod(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp11*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp11 ::= Exp11 _SYMB_15 Exp12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp11*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp11 ::= Exp11 _SYMB_13 Exp12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp11*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp12 ::= Exp13 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp12 ::= _SYMB_14 Exp12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ENeg(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp12 ::= _SYMB_13 Exp12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EDeref(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp12 ::= _SYMB_12 Exp12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.Edec(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp12 ::= _SYMB_11 Exp12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.Einc(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp13 ::= Exp14 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp13 ::= Exp13 _SYMB_12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.EPDec(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp13 ::= Exp13 _SYMB_11 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.EPInc(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp13 ::= Exp13 _SYMB_10 Id 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EArrow(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp13 ::= Exp13 _SYMB_9 Exp14 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EDot(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp14 ::= Exp15 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp14 ::= Exp14 _SYMB_0 ListExp _SYMB_1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		CPP.Absyn.ListExp p_3 = (CPP.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.ECall(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp14 ::= Exp14 _SYMB_7 Exp _SYMB_8 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.EIndex(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp15 ::= _SYMB_0 Exp _SYMB_1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp15 ::= _CHAR_ 
            {
              CPP.Absyn.Exp RESULT = null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EChar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp15 ::= ListId 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.ListId p_1 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EQcon(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp15 ::= _DOUBLE_ 
            {
              CPP.Absyn.Exp RESULT = null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EDouble(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp15 ::= ListString 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.ListString p_1 = (CPP.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EString(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp15 ::= _INTEGER_ 
            {
              CPP.Absyn.Exp RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stm ::= _SYMB_37 Stm _SYMB_48 _SYMB_0 Exp _SYMB_1 _SYMB_4 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Stm p_2 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		CPP.Absyn.Exp p_5 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CPP.Absyn.SDoWhile(p_2,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stm ::= _SYMB_40 _SYMB_0 Arg _SYMB_4 Exp _SYMB_4 Exp _SYMB_1 Stm 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Arg p_3 = (CPP.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		CPP.Absyn.Exp p_5 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		CPP.Absyn.Exp p_7 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Stm p_9 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.SFor(p_3,p_5,p_7,p_9); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stm ::= _SYMB_41 _SYMB_0 Exp _SYMB_1 Stm _SYMB_39 Stm 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		CPP.Absyn.Stm p_5 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Stm p_7 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stm ::= _SYMB_41 _SYMB_0 Exp _SYMB_1 Stm 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Stm p_5 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.SIf(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stm ::= _SYMB_2 ListStm _SYMB_3 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.ListStm p_2 = (CPP.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SBlock(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stm ::= _SYMB_48 _SYMB_0 Exp _SYMB_1 Stm 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Stm p_5 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stm ::= _SYMB_43 Exp _SYMB_4 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SReturn(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stm ::= _SYMB_45 Type Id _SYMB_4 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Type p_2 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.STypedeft(p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stm ::= _SYMB_45 ListId Id _SYMB_4 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.ListId p_2 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.STypedef(p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stm ::= Type Id _SYMB_6 Exp _SYMB_4 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		CPP.Absyn.Exp p_4 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SInit(p_1,p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stm ::= ListTypen _SYMB_4 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.ListTypen p_1 = (CPP.Absyn.ListTypen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SDecl(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stm ::= Exp _SYMB_4 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SExp(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Arg ::= Type Id _SYMB_6 Exp 
            {
              CPP.Absyn.Arg RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Exp p_4 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ADeclass(p_1,p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Arg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Arg ::= Type Id 
            {
              CPP.Absyn.Arg RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ADecl(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Arg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Arg ::= Type 
            {
              CPP.Absyn.Arg RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ADeclemp(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Arg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListStm ::= ListStm Stm 
            {
              CPP.Absyn.ListStm RESULT = null;
		CPP.Absyn.ListStm p_1 = (CPP.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		CPP.Absyn.Stm p_2 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListStm ::= 
            {
              CPP.Absyn.ListStm RESULT = null;
		 RESULT = new CPP.Absyn.ListStm(); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListArg ::= Arg _SYMB_5 ListArg 
            {
              CPP.Absyn.ListArg RESULT = null;
		CPP.Absyn.Arg p_1 = (CPP.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.ListArg p_3 = (CPP.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListArg ::= Arg 
            {
              CPP.Absyn.ListArg RESULT = null;
		CPP.Absyn.Arg p_1 = (CPP.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListArg ::= 
            {
              CPP.Absyn.ListArg RESULT = null;
		 RESULT = new CPP.Absyn.ListArg(); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Def ::= _SYMB_46 ListId _SYMB_4 
            {
              CPP.Absyn.Def RESULT = null;
		CPP.Absyn.ListId p_2 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.QConuse(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Def ::= Type Id _SYMB_6 Exp _SYMB_4 
            {
              CPP.Absyn.Def RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		CPP.Absyn.Exp p_4 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.DVarass(p_1,p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Def ::= ListTypen _SYMB_4 
            {
              CPP.Absyn.Def RESULT = null;
		CPP.Absyn.ListTypen p_1 = (CPP.Absyn.ListTypen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.DVardeq(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Def ::= _SYMB_45 Type Id _SYMB_4 
            {
              CPP.Absyn.Def RESULT = null;
		CPP.Absyn.Type p_2 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.DTypedeft(p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Def ::= _SYMB_45 ListId Id _SYMB_4 
            {
              CPP.Absyn.Def RESULT = null;
		CPP.Absyn.ListId p_2 = (CPP.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.DTypedef(p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Def ::= Type Id _SYMB_0 ListArg _SYMB_1 _SYMB_4 
            {
              CPP.Absyn.Def RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		CPP.Absyn.ListArg p_4 = (CPP.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CPP.Absyn.DFunemp(p_1,p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Def ::= Type Id _SYMB_0 ListArg _SYMB_1 _SYMB_2 ListStm _SYMB_3 
            {
              CPP.Absyn.Def RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		CPP.Absyn.ListArg p_4 = (CPP.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		CPP.Absyn.ListStm p_7 = (CPP.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.DFun(p_1,p_2,p_4,p_7); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListDef ::= ListDef Def 
            {
              CPP.Absyn.ListDef RESULT = null;
		CPP.Absyn.ListDef p_1 = (CPP.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		CPP.Absyn.Def p_2 = (CPP.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListDef ::= 
            {
              CPP.Absyn.ListDef RESULT = null;
		 RESULT = new CPP.Absyn.ListDef(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDef 
            {
              CPP.Absyn.Program RESULT = null;
		CPP.Absyn.ListDef p_1 = (CPP.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.Prog(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		CPP.Absyn.Program start_val = (CPP.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

