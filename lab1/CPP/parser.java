
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Nov 07 18:28:19 CET 2017
//----------------------------------------------------

package CPP;


/** CUP v0.10k generated parser.
  * @version Tue Nov 07 18:28:19 CET 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\003\003\000\002\004" +
    "\002\000\002\004\004\000\002\005\012\000\002\006\002" +
    "\000\002\006\003\000\002\006\005\000\002\007\002\000" +
    "\002\007\004\000\002\010\004\000\002\011\004\000\002" +
    "\011\005\000\002\011\007\000\002\011\005\000\002\011" +
    "\007\000\002\011\005\000\002\011\011\000\002\012\003" +
    "\000\002\012\005\000\002\013\003\000\002\014\003\000" +
    "\002\015\003\000\002\016\003\000\002\017\003\000\002" +
    "\020\003\000\002\021\003\000\002\022\003\000\002\023" +
    "\003\000\002\024\003\000\002\025\003\000\002\026\003" +
    "\000\002\027\003\000\002\030\003\000\002\031\003\000" +
    "\002\032\002\000\002\032\003\000\002\032\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\014\002\uffff\013\uffff\014\uffff\017\uffff\021" +
    "\uffff\001\002\000\004\002\106\001\002\000\014\002\000" +
    "\013\011\014\010\017\013\021\012\001\002\000\004\024" +
    "\014\001\002\000\014\002\ufffe\013\ufffe\014\ufffe\017\ufffe" +
    "\021\ufffe\001\002\000\004\024\uffda\001\002\000\004\024" +
    "\uffdb\001\002\000\004\024\uffd8\001\002\000\004\024\uffd9" +
    "\001\002\000\004\004\015\001\002\000\014\005\ufffc\013" +
    "\011\014\010\017\013\021\012\001\002\000\004\024\105" +
    "\001\002\000\006\005\ufffb\010\103\001\002\000\004\005" +
    "\021\001\002\000\004\006\022\001\002\000\030\004\ufff9" +
    "\006\ufff9\007\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\001\002\000\030\004\042" +
    "\006\040\007\036\013\011\014\010\016\034\017\013\020" +
    "\032\021\012\022\031\023\024\001\002\000\006\005\uffef" +
    "\011\uffef\001\002\000\006\005\uffe2\011\uffe2\001\002\000" +
    "\006\005\uffe3\011\uffe3\001\002\000\006\005\uffe4\011\uffe4" +
    "\001\002\000\030\004\ufff8\006\ufff8\007\ufff8\013\ufff8\014" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\001\002\000\004\004\077\001\002\000\006\004\042\023" +
    "\024\001\002\000\004\024\070\001\002\000\004\004\062" +
    "\001\002\000\006\005\uffe5\011\uffe5\001\002\000\014\002" +
    "\ufffd\013\ufffd\014\ufffd\017\ufffd\021\ufffd\001\002\000\006" +
    "\005\uffe6\011\uffe6\001\002\000\030\004\ufff9\006\ufff9\007" +
    "\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\001\002\000\006\005\uffe7\011\uffe7\001" +
    "\002\000\006\004\042\023\024\001\002\000\006\005\uffe8" +
    "\011\uffe8\001\002\000\004\011\055\001\002\000\006\005" +
    "\uffe9\011\uffe9\001\002\000\006\005\uffea\011\uffea\001\002" +
    "\000\006\005\uffeb\011\uffeb\001\002\000\006\005\uffec\011" +
    "\uffec\001\002\000\006\005\uffed\011\uffed\001\002\000\006" +
    "\005\uffdf\011\uffdf\001\002\000\006\005\uffe0\011\uffe0\001" +
    "\002\000\006\005\uffe1\011\uffe1\001\002\000\032\004\ufff6" +
    "\006\ufff6\007\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\001\002\000\004" +
    "\005\057\001\002\000\006\005\uffee\011\uffee\001\002\000" +
    "\030\004\042\006\040\007\061\013\011\014\010\016\034" +
    "\017\013\020\032\021\012\022\031\023\024\001\002\000" +
    "\032\004\ufff1\006\ufff1\007\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\001" +
    "\002\000\006\004\042\023\024\001\002\000\004\005\064" +
    "\001\002\000\026\004\042\006\040\013\011\014\010\016" +
    "\034\017\013\020\032\021\012\022\031\023\024\001\002" +
    "\000\004\015\066\001\002\000\026\004\042\006\040\013" +
    "\011\014\010\016\034\017\013\020\032\021\012\022\031" +
    "\023\024\001\002\000\032\004\ufff0\006\ufff0\007\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\001\002\000\006\011\072\012\071\001" +
    "\002\000\006\004\042\023\024\001\002\000\032\004\ufff5" +
    "\006\ufff5\007\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\001\002\000\004" +
    "\011\074\001\002\000\032\004\ufff4\006\ufff4\007\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\001\002\000\004\011\076\001\002\000" +
    "\032\004\ufff3\006\ufff3\007\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\001" +
    "\002\000\006\004\042\023\024\001\002\000\004\005\101" +
    "\001\002\000\026\004\042\006\040\013\011\014\010\016" +
    "\034\017\013\020\032\021\012\022\031\023\024\001\002" +
    "\000\032\004\ufff2\006\ufff2\007\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\001\002\000\014\005\ufffc\013\011\014\010\017\013\021" +
    "\012\001\002\000\004\005\ufffa\001\002\000\006\005\ufff7" +
    "\010\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\006\005\006\033\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\017\010\016\033\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\022\001\001\000\046\011\027\012\051\013\043\014" +
    "\050\015\047\016\046\017\045\020\044\021\042\022\040" +
    "\023\036\024\034\025\026\026\025\027\024\030\053\031" +
    "\052\033\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\012\051\013\074\014\050\015\047" +
    "\016\046\017\045\020\044\021\042\022\040\023\036\024" +
    "\034\025\026\026\025\027\024\030\053\031\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\057\001\001" +
    "\000\002\001\001\000\042\012\051\013\055\014\050\015" +
    "\047\016\046\017\045\020\044\021\042\022\040\023\036" +
    "\024\034\025\026\026\025\027\024\030\053\031\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\011\027\012\051\013\043\014\050\015\047" +
    "\016\046\017\045\020\044\021\042\022\040\023\036\024" +
    "\034\025\026\026\025\027\024\030\053\031\052\033\032" +
    "\001\001\000\002\001\001\000\042\012\051\013\062\014" +
    "\050\015\047\016\046\017\045\020\044\021\042\022\040" +
    "\023\036\024\034\025\026\026\025\027\024\030\053\031" +
    "\052\001\001\000\002\001\001\000\046\011\064\012\051" +
    "\013\043\014\050\015\047\016\046\017\045\020\044\021" +
    "\042\022\040\023\036\024\034\025\026\026\025\027\024" +
    "\030\053\031\052\033\032\001\001\000\002\001\001\000" +
    "\046\011\066\012\051\013\043\014\050\015\047\016\046" +
    "\017\045\020\044\021\042\022\040\023\036\024\034\025" +
    "\026\026\025\027\024\030\053\031\052\033\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\012\051\013" +
    "\072\014\050\015\047\016\046\017\045\020\044\021\042" +
    "\022\040\023\036\024\034\025\026\026\025\027\024\030" +
    "\053\031\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\012\051\013\077\014\050\015\047\016\046\017\045" +
    "\020\044\021\042\022\040\023\036\024\034\025\026\026" +
    "\025\027\024\030\053\031\052\001\001\000\002\001\001" +
    "\000\046\011\101\012\051\013\043\014\050\015\047\016" +
    "\046\017\045\020\044\021\042\022\040\023\036\024\034" +
    "\025\026\026\025\027\024\030\053\031\052\033\032\001" +
    "\001\000\002\001\001\000\010\006\103\010\016\033\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public CPP.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (CPP.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type ::= _SYMB_13 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tvoid(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= _SYMB_11 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tint(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Type ::= _SYMB_8 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tdouble(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= _SYMB_7 
            {
              CPP.Absyn.Type RESULT = null;
		 RESULT = new CPP.Absyn.Tbool(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListExp ::= Exp _SYMB_4 ListExp 
            {
              CPP.Absyn.ListExp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.ListExp p_3 = (CPP.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListExp ::= Exp 
            {
              CPP.Absyn.ListExp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListExp ::= 
            {
              CPP.Absyn.ListExp RESULT = null;
		 RESULT = new CPP.Absyn.ListExp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp14 ::= Exp15 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp13 ::= Exp14 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp12 ::= Exp13 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp11 ::= Exp12 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Exp11*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp10 ::= Exp11 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp10*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp9 ::= Exp10 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp8 ::= Exp9 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Exp8*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp7 ::= Exp8 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Exp7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp6 ::= Exp7 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp5 ::= Exp6 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp4 ::= Exp5 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp3 ::= Exp4 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Exp3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp2 ::= Exp3 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp1 ::= Exp2 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp ::= Exp1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Exp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp15 ::= _SYMB_0 Exp _SYMB_1 
            {
              CPP.Absyn.Exp RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp15 ::= _INTEGER_ 
            {
              CPP.Absyn.Exp RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.EInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stm ::= _SYMB_10 _SYMB_0 Exp _SYMB_1 Stm _SYMB_9 Stm 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		CPP.Absyn.Stm p_5 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Stm p_7 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stm ::= _SYMB_2 ListStm _SYMB_3 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.ListStm p_2 = (CPP.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SBlock(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stm ::= _SYMB_14 _SYMB_0 Exp _SYMB_1 Stm 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_3 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.Stm p_5 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stm ::= _SYMB_12 Exp _SYMB_5 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_2 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SReturn(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stm ::= Type Id _SYMB_6 Exp _SYMB_5 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		CPP.Absyn.Exp p_4 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SInit(p_1,p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stm ::= Type Id _SYMB_5 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SDecl(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Stm ::= Exp _SYMB_5 
            {
              CPP.Absyn.Stm RESULT = null;
		CPP.Absyn.Exp p_1 = (CPP.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.SExp(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Arg ::= Type Id 
            {
              CPP.Absyn.Arg RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ADecl(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Arg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListStm ::= ListStm Stm 
            {
              CPP.Absyn.ListStm RESULT = null;
		CPP.Absyn.ListStm p_1 = (CPP.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		CPP.Absyn.Stm p_2 = (CPP.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListStm ::= 
            {
              CPP.Absyn.ListStm RESULT = null;
		 RESULT = new CPP.Absyn.ListStm(); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListArg ::= Arg _SYMB_4 ListArg 
            {
              CPP.Absyn.ListArg RESULT = null;
		CPP.Absyn.Arg p_1 = (CPP.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		CPP.Absyn.ListArg p_3 = (CPP.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListArg ::= Arg 
            {
              CPP.Absyn.ListArg RESULT = null;
		CPP.Absyn.Arg p_1 = (CPP.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListArg ::= 
            {
              CPP.Absyn.ListArg RESULT = null;
		 RESULT = new CPP.Absyn.ListArg(); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Def ::= Type Id _SYMB_0 ListArg _SYMB_1 _SYMB_2 ListStm _SYMB_3 
            {
              CPP.Absyn.Def RESULT = null;
		CPP.Absyn.Type p_1 = (CPP.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		CPP.Absyn.ListArg p_4 = (CPP.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		CPP.Absyn.ListStm p_7 = (CPP.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CPP.Absyn.DFun(p_1,p_2,p_4,p_7); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListDef ::= ListDef Def 
            {
              CPP.Absyn.ListDef RESULT = null;
		CPP.Absyn.ListDef p_1 = (CPP.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		CPP.Absyn.Def p_2 = (CPP.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListDef ::= 
            {
              CPP.Absyn.ListDef RESULT = null;
		 RESULT = new CPP.Absyn.ListDef(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDef 
            {
              CPP.Absyn.Program RESULT = null;
		CPP.Absyn.ListDef p_1 = (CPP.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CPP.Absyn.PDefs(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		CPP.Absyn.Program start_val = (CPP.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

