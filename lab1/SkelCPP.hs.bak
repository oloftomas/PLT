module SkelCPP where

-- Haskell module generated by the BNF converter

import AbsCPP
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun type_ id args stms -> failure x
  QConuse ids -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ADecl type_ id -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SExp exp -> failure x
  SDecl type_ id -> failure x
  SDecls type_ id ids -> failure x
  SInit type_ id exp -> failure x
  STypedef ids id -> failure x
  SReturn exp -> failure x
  SWhile exp stm -> failure x
  SBlock stms -> failure x
  SIfElse exp stm1 stm2 -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EInt integer -> failure x
  EString strings -> failure x
  EDouble double -> failure x
  EQcon ids -> failure x
  EIndex exp1 exp2 -> failure x
  ECall exp exps -> failure x
  EDot exp1 exp2 -> failure x
  EArrow exp id -> failure x
  EInc exp -> failure x
  EDec exp -> failure x
  EPinc exp -> failure x
  EPdec exp -> failure x
  EDeref exp -> failure x
  ENeg exp -> failure x
  ELShift exp1 exp2 -> failure x
  ERShift exp1 exp2 -> failure x
transType :: Type -> Result
transType x = case x of
  Tbool -> failure x
  Tdouble -> failure x
  Tint -> failure x
  Tvoid -> failure x
  Tid ids -> failure x

