

module AbsCPP where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = Prog [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DFun Type Id [Arg] [Stm]
    | DFunemp Type Id [Arg]
    | DTypedef [Id] Id
    | DTypedeft Type Id
    | DVardef Type [TypeN]
    | QConuse [Id]
  deriving (Eq, Ord, Show, Read)

data Arg = ADeclemp Type | ADecl Type Id | ADeclass Type Id Exp
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SDecl Type Id
    | SDecls Type Id [TypeN]
    | SInit Type [TypeN]
    | STypedef [Id] Id
    | STypedeft Type Id
    | SReturn Exp
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SFor Arg Exp Exp Stm
    | SDoWhile Stm Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EString [String]
    | EDouble Double
    | EQcon [Id]
    | EChar Char
    | EIndex Exp Exp
    | ECall Exp [Exp]
    | EDot Exp Exp
    | EArrow Exp Exp
    | EPInc Exp
    | EPDec Exp
    | Einc Exp
    | Edec Exp
    | EDeref Exp
    | ENeg Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ELShift Exp Exp
    | ERShift Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELteq Exp Exp
    | EGteq Exp Exp
    | EEq Exp Exp
    | ENeq Exp Exp
    | EConj Exp Exp
    | EDisj Exp Exp
    | EAss Exp Exp
    | EAssp Exp Exp
    | EAssm Exp Exp
    | ECond Exp Exp Exp
    | EThrow Exp
  deriving (Eq, Ord, Show, Read)

data Type
    = Ttype1 Type
    | Ttype2 Type
    | Ttype3 Type
    | Ttype4 Type
    | Tbool
    | Tdouble
    | Tint
    | Tvoid
    | Tid [Id]
  deriving (Eq, Ord, Show, Read)

data TypeN = Tname Id | Tnameinit Id Exp
  deriving (Eq, Ord, Show, Read)

