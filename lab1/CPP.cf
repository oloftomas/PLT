-- Program defifinition
Prog. 	Program ::= [Def] ;
terminator Def "" ;

-- Comments
comment 	"#" ;
comment 	"//" ;
comment 	"/*" "*/" ;

-- Functions definition
DFun. 		Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
separator	Arg "," ;
terminator 	Stm "" ;

-- typedefs TODO

-- using
QConuse.	Def ::= "using" [Id] ";" ;

-- Argument Decl
ADecl. 		Arg ::= Type Id ;

-- Statements (Expressions followed by ";")
SExp.		Stm ::= Exp ";" ;

-- Statement (declaration)
SDecl. 		Stm ::= Type Id ";" ;
SDecls.		Stm ::= Type Id "," [Id] ";" ;
SInit. 		Stm ::= Type Id "=" Exp ";" ;

STypedef.	Stm ::= "typedef" [Id] Id";" ;

-- Statemens (return, while, block, ifelse)
SReturn. 	Stm ::= "return" Exp ";" ;
SWhile.		Stm ::= "while" "(" Exp ")" Stm ;
SBlock. 	Stm ::= "{" [Stm] "}" ;
SIfElse.	Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

-- Expressions, precedence levels
EInt. 		Exp15 ::= Integer ;
EString. 	Exp15 ::= [String] ;
EDouble.	Exp15 ::= Double ;
EQcon.		Exp15 ::= [Id] ;

EIndex.		Exp14 ::= Exp14 "[" Exp "]" ;
ECall. 		Exp14 ::= Exp14 "(" [Exp] ")" ;
EDot.		Exp13 ::= Exp13 "." Exp ;
EArrow. 	Exp13 ::= Exp13 "->" Id ;

{-
EMul. 		Exp11 ::= Exp11 "*" Exp12 ;
EDiv. 		Exp11 ::= Exp11 "/" Exp12 ;
EMod.		Exp11 ::= Exp11 "%" Exp12 ;
-}

ELShift.	Exp9 ::= Exp9 "<<" Exp10 ;
ERShift.	Exp9 ::= Exp9 ">>" Exp10 ;

{-
EEq.		Exp7 ::= Exp7 "==" Exp8 ;
ENeq.		Exp7 ::= Exp7 "!=" Exp8 ;

EConj.		Exp3 ::= Exp3 "&&" Exp4 ;
EDisj.		Exp2 ::= Exp2 "||" Exp3 ;

EAss.		Exp1 ::= Exp2 "=" Exp1 ;
EAssp.		Exp1 ::= Exp2 "+=" Exp1 ;
EAssm.		Exp1 ::= Exp2 "-=" Exp1 ;

ECond.		Exp1 ::= Exp2 "?" Exp ":" Exp1 ;
-}

coercions 	Exp 15 ;
separator 	Exp "," ;

separator 	String "" ;

-- Types
Tbool.		Type ::= "bool" ;
Tdouble.	Type ::= "double" ;
Tint.		Type ::= "int" ;
Tvoid.		Type ::= "void" ;
Tid.		Type ::= [Id] ;

-- Id
token Id (letter (letter | digit | '_')*) ;
separator nonempty Id "::" ;
