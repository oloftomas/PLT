

module AbsCPP where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = Prog [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DFun Type Id [Arg] [Stm] | QConuse [Id]
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Type Id
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SDecl Type Id
    | SDecls Type Id [Id]
    | SInit Type Id Exp
    | STypedef [Id] Id
    | SReturn Exp
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIfElse Exp Stm Stm
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EString [String]
    | EDouble Double
    | EQcon [Id]
    | EIndex Exp Exp
    | ECall Exp [Exp]
    | EDot Exp Exp
    | EArrow Exp Id
    | EInc Exp
    | EDec Exp
    | EPinc Exp
    | EPdec Exp
    | EDeref Exp
    | ENeg Exp
    | ELShift Exp Exp
    | ERShift Exp Exp
  deriving (Eq, Ord, Show, Read)

data Type = Tbool | Tdouble | Tint | Tvoid | Tid [Id]
  deriving (Eq, Ord, Show, Read)

